import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  Patch,
  Post,
  Query,
} from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiBody,
  ApiConflictResponse,
  ApiCreatedResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiTags,
  ApiUnauthorizedResponse,
} from '@nestjs/swagger';

import { AdminsService } from './admins.service';
import { AdminResponseDto, LoginResponseDto } from './dto/admin-response.dto';
import { ChangePasswordDto } from './dto/change-password.dto';
import { CreateAdminDto } from './dto/create-admin.dto';
import { LoginAdminDto } from './dto/login-admin.dto';
import { UpdateAdminDto } from './dto/update-admin.dto';

@ApiTags('üîê Admins - Qu·∫£n l√Ω qu·∫£n tr·ªã vi√™n')
@Controller('admins')
export class AdminsController {
  constructor(private readonly adminsService: AdminsService) {}

  @Post('register')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'T·∫°o t√†i kho·∫£n qu·∫£n tr·ªã vi√™n m·ªõi',
    description:
      'T·∫°o t√†i kho·∫£n qu·∫£n tr·ªã vi√™n m·ªõi v·ªõi username v√† email duy nh·∫•t',
  })
  @ApiCreatedResponse({
    description: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng',
    type: AdminResponseDto,
    example: {
      success: true,
      message: 'T·∫°o t√†i kho·∫£n qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        username: 'admin01',
        email: 'admin@jewelry-shop.com',
        role: 'Staff',
        lastLogin: null,
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
    example: {
      success: false,
      message: 'Validation failed',
      errors: [
        'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
        'T√™n ƒëƒÉng nh·∫≠p ph·∫£i t·ª´ 3-50 k√Ω t·ª±',
      ],
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiConflictResponse({
    description: 'Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i',
    example: {
      success: false,
      message: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBody({
    type: CreateAdminDto,
    description: 'Th√¥ng tin t·∫°o t√†i kho·∫£n qu·∫£n tr·ªã vi√™n',
    examples: {
      staff: {
        summary: 'T·∫°o t√†i kho·∫£n Staff',
        value: {
          username: 'staff01',
          email: 'staff@jewelry-shop.com',
          password: 'staffpassword123',
          role: 'Staff',
        },
      },
      superAdmin: {
        summary: 'T·∫°o t√†i kho·∫£n SuperAdmin',
        value: {
          username: 'superadmin',
          email: 'superadmin@jewelry-shop.com',
          password: 'superadminpassword123',
          role: 'SuperAdmin',
        },
      },
    },
  })
  async create(@Body() createAdminDto: CreateAdminDto) {
    const admin = await this.adminsService.create(createAdminDto);
    return {
      success: true,
      message: 'T·∫°o t√†i kho·∫£n qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      data: admin,
      timestamp: new Date().toISOString(),
    };
  }

  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'ƒêƒÉng nh·∫≠p qu·∫£n tr·ªã vi√™n',
    description: 'X√°c th·ª±c th√¥ng tin ƒëƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ JWT tokens',
  })
  @ApiOkResponse({
    description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
    type: LoginResponseDto,
    example: {
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        admin: {
          _id: '60d5f484e1a2f5001f647abc',
          username: 'admin01',
          email: 'admin@jewelry-shop.com',
          role: 'Staff',
          lastLogin: '2024-01-01T00:00:00.000Z',
          createdAt: '2024-01-01T00:00:00.000Z',
          updatedAt: '2024-01-01T00:00:00.000Z',
        },
        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        expiresIn: 86400,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiUnauthorizedResponse({
    description: 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng',
    example: {
      success: false,
      message: 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBody({
    type: LoginAdminDto,
    description: 'Th√¥ng tin ƒëƒÉng nh·∫≠p',
    examples: {
      withUsername: {
        summary: 'ƒêƒÉng nh·∫≠p v·ªõi username',
        value: {
          usernameOrEmail: 'admin01',
          password: 'adminpassword123',
        },
      },
      withEmail: {
        summary: 'ƒêƒÉng nh·∫≠p v·ªõi email',
        value: {
          usernameOrEmail: 'admin@jewelry-shop.com',
          password: 'adminpassword123',
        },
      },
    },
  })
  async login(@Body() loginAdminDto: LoginAdminDto) {
    const result = await this.adminsService.login(loginAdminDto);
    return {
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: result,
      timestamp: new Date().toISOString(),
    };
  }

  @Get()
  @ApiOperation({
    summary: 'L·∫•y danh s√°ch qu·∫£n tr·ªã vi√™n',
    description: 'L·∫•y danh s√°ch t·∫•t c·∫£ qu·∫£n tr·ªã vi√™n v·ªõi ph√¢n trang',
  })
  @ApiQuery({
    name: 'page',
    required: false,
    type: Number,
    description: 'S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)',
    example: 1,
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    type: Number,
    description: 'S·ªë b·∫£n ghi tr√™n m·ªói trang',
    example: 10,
  })
  @ApiOkResponse({
    description: 'L·∫•y danh s√°ch th√†nh c√¥ng',
    example: {
      success: true,
      message: 'L·∫•y danh s√°ch qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      data: {
        items: [
          {
            _id: '60d5f484e1a2f5001f647abc',
            username: 'admin01',
            email: 'admin@jewelry-shop.com',
            role: 'Staff',
            lastLogin: '2024-01-01T00:00:00.000Z',
            createdAt: '2024-01-01T00:00:00.000Z',
            updatedAt: '2024-01-01T00:00:00.000Z',
          },
        ],
        total: 50,
        page: 1,
        limit: 10,
        totalPages: 5,
        hasNextPage: true,
        hasPrevPage: false,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async findAll(
    @Query('page') page: string = '1',
    @Query('limit') limit: string = '10',
  ) {
    const admins = await this.adminsService.findAll(
      parseInt(page),
      parseInt(limit),
    );
    return {
      success: true,
      message: 'L·∫•y danh s√°ch qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      data: admins,
      timestamp: new Date().toISOString(),
    };
  }

  @Get(':id')
  @ApiOperation({
    summary: 'L·∫•y th√¥ng tin qu·∫£n tr·ªã vi√™n theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt qu·∫£n tr·ªã vi√™n c·ª• th·ªÉ',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa qu·∫£n tr·ªã vi√™n (MongoDB ObjectId)',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'L·∫•y th√¥ng tin th√†nh c√¥ng',
    type: AdminResponseDto,
    example: {
      success: true,
      message: 'L·∫•y th√¥ng tin qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        username: 'admin01',
        email: 'admin@jewelry-shop.com',
        role: 'Staff',
        lastLogin: '2024-01-01T00:00:00.000Z',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n',
    example: {
      success: false,
      message: 'Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async findOne(@Param('id') id: string) {
    const admin = await this.adminsService.findOne(id);
    return {
      success: true,
      message: 'L·∫•y th√¥ng tin qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      data: admin,
      timestamp: new Date().toISOString(),
    };
  }

  @Patch(':id')
  @ApiOperation({
    summary: 'C·∫≠p nh·∫≠t th√¥ng tin qu·∫£n tr·ªã vi√™n',
    description:
      'C·∫≠p nh·∫≠t th√¥ng tin qu·∫£n tr·ªã vi√™n (kh√¥ng bao g·ªìm email v√† password)',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa qu·∫£n tr·ªã vi√™n',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiBody({
    type: UpdateAdminDto,
    description: 'Th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t',
    examples: {
      updateUsername: {
        summary: 'C·∫≠p nh·∫≠t username',
        value: {
          username: 'admin01_updated',
        },
      },
      updateRole: {
        summary: 'C·∫≠p nh·∫≠t vai tr√≤',
        value: {
          role: 'SuperAdmin',
        },
      },
      updateAll: {
        summary: 'C·∫≠p nh·∫≠t c·∫£ username v√† role',
        value: {
          username: 'superadmin01',
          role: 'SuperAdmin',
        },
      },
    },
  })
  @ApiOkResponse({
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: AdminResponseDto,
    example: {
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        username: 'admin01_updated',
        email: 'admin@jewelry-shop.com',
        role: 'SuperAdmin',
        lastLogin: '2024-01-01T00:00:00.000Z',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T01:00:00.000Z',
      },
      timestamp: '2024-01-01T01:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n',
  })
  @ApiConflictResponse({
    description: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
  })
  async update(
    @Param('id') id: string,
    @Body() updateAdminDto: UpdateAdminDto,
  ) {
    const admin = await this.adminsService.update(id, updateAdminDto);
    return {
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      data: admin,
      timestamp: new Date().toISOString(),
    };
  }

  @Patch(':id/change-password')
  @ApiOperation({
    summary: 'ƒê·ªïi m·∫≠t kh·∫©u qu·∫£n tr·ªã vi√™n',
    description:
      'Thay ƒë·ªïi m·∫≠t kh·∫©u cho qu·∫£n tr·ªã vi√™n v·ªõi x√°c th·ª±c m·∫≠t kh·∫©u hi·ªán t·∫°i',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa qu·∫£n tr·ªã vi√™n',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiBody({
    type: ChangePasswordDto,
    description: 'Th√¥ng tin ƒë·ªïi m·∫≠t kh·∫©u',
    examples: {
      changePassword: {
        summary: 'ƒê·ªïi m·∫≠t kh·∫©u',
        value: {
          currentPassword: 'oldadminpassword123',
          newPassword: 'newadminpassword456',
          confirmPassword: 'newadminpassword456',
        },
      },
    },
  })
  @ApiOkResponse({
    description: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
    example: {
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng ho·∫∑c m·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp',
    example: {
      success: false,
      message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n',
  })
  async changePassword(
    @Param('id') id: string,
    @Body() changePasswordDto: ChangePasswordDto,
  ) {
    const result = await this.adminsService.changePassword(
      id,
      changePasswordDto,
    );
    return {
      success: true,
      message: result.message,
      timestamp: new Date().toISOString(),
    };
  }

  @Delete(':id')
  @ApiOperation({
    summary: 'X√≥a qu·∫£n tr·ªã vi√™n',
    description:
      'X√≥a qu·∫£n tr·ªã vi√™n kh·ªèi h·ªá th·ªëng (kh√¥ng th·ªÉ x√≥a SuperAdmin cu·ªëi c√πng)',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa qu·∫£n tr·ªã vi√™n c·∫ßn x√≥a',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'X√≥a qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
    example: {
      success: true,
      message: 'X√≥a qu·∫£n tr·ªã vi√™n th√†nh c√¥ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n',
    example: {
      success: false,
      message: 'Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'Kh√¥ng th·ªÉ x√≥a SuperAdmin cu·ªëi c√πng',
    example: {
      success: false,
      message: 'Kh√¥ng th·ªÉ x√≥a qu·∫£n tr·ªã vi√™n c·∫•p cao cu·ªëi c√πng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async remove(@Param('id') id: string) {
    const result = await this.adminsService.remove(id);
    return {
      success: true,
      message: result.message,
      timestamp: new Date().toISOString(),
    };
  }

  @Post('refresh-token')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'L√†m m·ªõi access token',
    description: 'S·ª≠ d·ª•ng refresh token ƒë·ªÉ t·∫°o access token m·ªõi',
  })
  @ApiBody({
    description: 'Refresh token',
    schema: {
      type: 'object',
      properties: {
        refreshToken: {
          type: 'string',
          description: 'JWT Refresh Token',
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        },
      },
      required: ['refreshToken'],
    },
  })
  @ApiOkResponse({
    description: 'L√†m m·ªõi token th√†nh c√¥ng',
    example: {
      success: true,
      message: 'L√†m m·ªõi token th√†nh c√¥ng',
      data: {
        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        expiresIn: 86400,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiUnauthorizedResponse({
    description: 'Refresh token kh√¥ng h·ª£p l·ªá',
    example: {
      success: false,
      message: 'Token kh√¥ng h·ª£p l·ªá',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async refreshToken(@Body('refreshToken') refreshToken: string) {
    const result = await this.adminsService.refreshToken(refreshToken);
    return {
      success: true,
      message: 'L√†m m·ªõi token th√†nh c√¥ng',
      data: result,
      timestamp: new Date().toISOString(),
    };
  }
}
