import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  Patch,
  Post,
  Query,
} from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiBody,
  ApiConflictResponse,
  ApiCreatedResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiTags,
} from '@nestjs/swagger';

import { CategoriesService } from './categories.service';
import {
  CategoryResponseDto,
  CategoryTreeDto,
  CategoryWithSubcategoriesDto,
} from './dto/category-response.dto';
import { CreateCategoryDto } from './dto/create-category.dto';
import { UpdateCategoryDto } from './dto/update-category.dto';

@ApiTags('üìÅ Categories - Qu·∫£n l√Ω danh m·ª•c')
@Controller('categories')
export class CategoriesController {
  constructor(private readonly categoriesService: CategoriesService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'T·∫°o danh m·ª•c m·ªõi',
    description: 'T·∫°o danh m·ª•c m·ªõi v·ªõi t√™n duy nh·∫•t trong c√πng danh m·ª•c cha',
  })
  @ApiCreatedResponse({
    description: 'T·∫°o danh m·ª•c th√†nh c√¥ng',
    type: CategoryResponseDto,
    example: {
      success: true,
      message: 'T·∫°o danh m·ª•c th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        categoryName: 'Nh·∫´n Kim c∆∞∆°ng',
        description: 'C√°c lo·∫°i nh·∫´n ƒë√≠nh kim c∆∞∆°ng cao c·∫•p',
        parentId: '60d5f484e1a2f5001f647def',
        isActive: true,
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
    example: {
      success: false,
      message: 'Validation failed',
      errors: ['T√™n danh m·ª•c ph·∫£i t·ª´ 2-100 k√Ω t·ª±'],
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiConflictResponse({
    description: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i',
    example: {
      success: false,
      message: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i trong danh m·ª•c cha n√†y',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBody({
    type: CreateCategoryDto,
    description: 'Th√¥ng tin danh m·ª•c m·ªõi',
    examples: {
      rootCategory: {
        summary: 'Danh m·ª•c g·ªëc',
        value: {
          categoryName: 'Nh·∫´n',
          description: 'C√°c lo·∫°i nh·∫´n trang s·ª©c',
          isActive: true,
        },
      },
      subcategory: {
        summary: 'Danh m·ª•c con',
        value: {
          categoryName: 'Nh·∫´n Kim c∆∞∆°ng',
          description: 'C√°c lo·∫°i nh·∫´n ƒë√≠nh kim c∆∞∆°ng cao c·∫•p',
          parentId: '60d5f484e1a2f5001f647def',
          isActive: true,
        },
      },
    },
  })
  async create(
    @Body() createCategoryDto: CreateCategoryDto,
  ): Promise<CategoryResponseDto> {
    return this.categoriesService.create(createCategoryDto);
  }

  @Get()
  @ApiOperation({
    summary: 'L·∫•y danh s√°ch danh m·ª•c',
    description: 'L·∫•y danh s√°ch danh m·ª•c v·ªõi ph√¢n trang v√† b·ªô l·ªçc',
  })
  @ApiQuery({
    name: 'page',
    required: false,
    type: Number,
    description: 'S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)',
    example: 1,
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    type: Number,
    description: 'S·ªë b·∫£n ghi tr√™n m·ªói trang',
    example: 10,
  })
  @ApiQuery({
    name: 'isActive',
    required: false,
    type: Boolean,
    description: 'L·ªçc theo tr·∫°ng th√°i ho·∫°t ƒë·ªông',
    example: true,
  })
  @ApiQuery({
    name: 'parentId',
    required: false,
    type: String,
    description: 'L·ªçc theo danh m·ª•c cha (null ƒë·ªÉ l·∫•y danh m·ª•c g·ªëc)',
    example: '60d5f484e1a2f5001f647def',
  })
  @ApiQuery({
    name: 'search',
    required: false,
    type: String,
    description: 'T√¨m ki·∫øm theo t√™n danh m·ª•c',
  })
  @ApiOkResponse({
    description: 'L·∫•y danh s√°ch th√†nh c√¥ng',
    example: {
      success: true,
      message: 'L·∫•y danh s√°ch danh m·ª•c th√†nh c√¥ng',
      data: {
        items: [
          {
            _id: '60d5f484e1a2f5001f647abc',
            categoryName: 'Nh·∫´n Kim c∆∞∆°ng',
            description: 'C√°c lo·∫°i nh·∫´n ƒë√≠nh kim c∆∞∆°ng cao c·∫•p',
            parentId: '60d5f484e1a2f5001f647def',
            isActive: true,
            createdAt: '2024-01-01T00:00:00.000Z',
            updatedAt: '2024-01-01T00:00:00.000Z',
          },
        ],
        total: 50,
        page: 1,
        limit: 10,
        totalPages: 5,
        hasNextPage: true,
        hasPrevPage: false,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async findAll(
    @Query('page') page?: number,
    @Query('limit') limit?: number,
    @Query('isActive') isActive?: boolean,
    @Query('parentId') parentId?: string,
    @Query('search') search?: string,
  ) {
    const result = await this.categoriesService.findAll({
      page,
      limit,
      isActive,
      parentId,
      search,
    });

    return {
      success: true,
      message: 'L·∫•y danh s√°ch danh m·ª•c th√†nh c√¥ng',
      data: result,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('tree')
  @ApiOperation({
    summary: 'L·∫•y c√¢y danh m·ª•c',
    description: 'L·∫•y to√†n b·ªô c√¢y danh m·ª•c theo c·∫•u tr√∫c ph√¢n c·∫•p',
  })
  @ApiOkResponse({
    description: 'L·∫•y c√¢y danh m·ª•c th√†nh c√¥ng',
    type: [CategoryTreeDto],
  })
  async getCategoryTree(): Promise<CategoryTreeDto[]> {
    return this.categoriesService.getTree();
  }

  @Get('root')
  @ApiOperation({
    summary: 'L·∫•y danh m·ª•c g·ªëc',
    description: 'L·∫•y t·∫•t c·∫£ danh m·ª•c g·ªëc (kh√¥ng c√≥ danh m·ª•c cha)',
  })
  @ApiOkResponse({
    description: 'L·∫•y danh m·ª•c g·ªëc th√†nh c√¥ng',
    type: [CategoryResponseDto],
    example: {
      success: true,
      message: 'L·∫•y danh m·ª•c g·ªëc th√†nh c√¥ng',
      data: [
        {
          _id: '60d5f484e1a2f5001f647abc',
          categoryName: 'Nh·∫´n',
          description: 'C√°c lo·∫°i nh·∫´n trang s·ª©c',
          parentId: null,
          isActive: true,
          createdAt: '2024-01-01T00:00:00.000Z',
          updatedAt: '2024-01-01T00:00:00.000Z',
        },
      ],
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async getRootCategories(): Promise<CategoryResponseDto[]> {
    return this.categoriesService.getRootCategories();
  }

  @Get('stats')
  @ApiOperation({
    summary: 'L·∫•y th·ªëng k√™ danh m·ª•c',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ danh m·ª•c',
  })
  @ApiOkResponse({
    description: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
  })
  // @ApiBearerAuth() // Uncomment khi c√≥ authentication
  // @UseGuards(AuthGuard) // Uncomment khi c√≥ authentication
  async getCategoryStats() {
    return this.categoriesService.getCategoryStats();
  }

  @Get('search')
  @ApiOperation({
    summary: 'T√¨m ki·∫øm danh m·ª•c',
    description: 'T√¨m ki·∫øm danh m·ª•c theo t√™n ho·∫∑c m√¥ t·∫£',
  })
  @ApiQuery({
    name: 'q',
    required: true,
    type: String,
    description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
  })
  @ApiOkResponse({
    description: 'T√¨m ki·∫øm th√†nh c√¥ng',
    type: [CategoryResponseDto],
  })
  async searchCategories(
    @Query('q') query: string,
  ): Promise<CategoryResponseDto[]> {
    return this.categoriesService.searchCategories(query);
  }

  @Get(':id/subcategories')
  @ApiOperation({
    summary: 'L·∫•y danh m·ª•c con',
    description: 'L·∫•y t·∫•t c·∫£ danh m·ª•c con c·ªßa m·ªôt danh m·ª•c',
  })
  @ApiParam({
    name: 'id',
    description: 'ID danh m·ª•c cha',
    example: '60d5f484e1a2f5001f647def',
  })
  @ApiOkResponse({
    description: 'L·∫•y danh m·ª•c con th√†nh c√¥ng',
    type: [CategoryResponseDto],
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c cha',
  })
  async getSubcategories(
    @Param('id') id: string,
  ): Promise<CategoryResponseDto[]> {
    return this.categoriesService.getSubcategories(id);
  }

  @Get(':id')
  @ApiOperation({
    summary: 'L·∫•y chi ti·∫øt danh m·ª•c',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt danh m·ª•c',
  })
  @ApiParam({
    name: 'id',
    description: 'ID danh m·ª•c',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'L·∫•y th√¥ng tin th√†nh c√¥ng',
    type: CategoryWithSubcategoriesDto,
    example: {
      success: true,
      message: 'L·∫•y th√¥ng tin danh m·ª•c th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        categoryName: 'Nh·∫´n Kim c∆∞∆°ng',
        description: 'C√°c lo·∫°i nh·∫´n ƒë√≠nh kim c∆∞∆°ng cao c·∫•p',
        parentId: '60d5f484e1a2f5001f647def',
        isActive: true,
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
        parent: {
          _id: '60d5f484e1a2f5001f647def',
          categoryName: 'Nh·∫´n',
          description: 'C√°c lo·∫°i nh·∫´n trang s·ª©c',
          parentId: null,
          isActive: true,
          createdAt: '2024-01-01T00:00:00.000Z',
          updatedAt: '2024-01-01T00:00:00.000Z',
        },
        subcategories: [],
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
  })
  async findOne(@Param('id') id: string) {
    return this.categoriesService.findOne(id);
  }

  @Patch(':id')
  @ApiOperation({
    summary: 'C·∫≠p nh·∫≠t danh m·ª•c',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin danh m·ª•c',
  })
  @ApiParam({
    name: 'id',
    description: 'ID danh m·ª•c',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: CategoryResponseDto,
  })
  @ApiBadRequestResponse({
    description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
  })
  @ApiConflictResponse({
    description: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i',
  })
  // @ApiBearerAuth() // Uncomment khi c√≥ authentication
  // @UseGuards(AuthGuard) // Uncomment khi c√≥ authentication
  async update(
    @Param('id') id: string,
    @Body() updateCategoryDto: UpdateCategoryDto,
  ): Promise<CategoryResponseDto> {
    return this.categoriesService.update(id, updateCategoryDto);
  }

  @Patch(':id/toggle-active')
  @ApiOperation({
    summary: 'K√≠ch ho·∫°t/v√¥ hi·ªáu h√≥a danh m·ª•c',
    description: 'Thay ƒë·ªïi tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa danh m·ª•c',
  })
  @ApiParam({
    name: 'id',
    description: 'ID danh m·ª•c',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng',
    type: CategoryResponseDto,
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
  })
  // @ApiBearerAuth() // Uncomment khi c√≥ authentication
  // @UseGuards(AuthGuard) // Uncomment khi c√≥ authentication
  async toggleActive(@Param('id') id: string): Promise<CategoryResponseDto> {
    return this.categoriesService.toggleActive(id);
  }

  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: 'X√≥a danh m·ª•c',
    description: 'X√≥a danh m·ª•c (kh√¥ng c√≥ danh m·ª•c con v√† s·∫£n ph·∫©m)',
  })
  @ApiParam({
    name: 'id',
    description: 'ID danh m·ª•c',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'X√≥a th√†nh c√¥ng',
  })
  @ApiBadRequestResponse({
    description: 'Kh√¥ng th·ªÉ x√≥a danh m·ª•c c√≥ danh m·ª•c con ho·∫∑c s·∫£n ph·∫©m',
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
  })
  // @ApiBearerAuth() // Uncomment khi c√≥ authentication
  // @UseGuards(AuthGuard) // Uncomment khi c√≥ authentication
  async remove(@Param('id') id: string): Promise<void> {
    return this.categoriesService.remove(id);
  }
}
