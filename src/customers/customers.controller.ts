import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  Patch,
  Post,
  Query,
} from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiBody,
  ApiConflictResponse,
  ApiCreatedResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiTags,
  ApiUnauthorizedResponse,
} from '@nestjs/swagger';

import { CustomersService } from './customers.service';
import { ChangePasswordDto } from './dto/change-password.dto';
import { CreateCustomerDto } from './dto/create-customer.dto';
import {
  CustomerResponseDto,
  LoginResponseDto,
} from './dto/customer-response.dto';
import { ForgotPasswordDto } from './dto/forgot-password.dto';
import { LoginCustomerDto } from './dto/login-customer.dto';
import { ResetPasswordDto } from './dto/reset-password.dto';
import { UpdateCustomerDto } from './dto/update-customer.dto';

@ApiTags('üë• Customers - Qu·∫£n l√Ω kh√°ch h√†ng')
@Controller('customers')
export class CustomersController {
  constructor(private readonly customersService: CustomersService) {}

  @Post('register')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'ƒêƒÉng k√Ω kh√°ch h√†ng m·ªõi',
    description:
      'T·∫°o t√†i kho·∫£n kh√°ch h√†ng m·ªõi v·ªõi email v√† s·ªë ƒëi·ªán tho·∫°i duy nh·∫•t',
  })
  @ApiCreatedResponse({
    description: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
    type: CustomerResponseDto,
    example: {
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        fullName: 'Nguy·ªÖn VƒÉn An',
        phone: '0987654321',
        email: 'nguyenvana@email.com',
        address: '123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 2, Qu·∫≠n 5, TP.HCM',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
    example: {
      success: false,
      message: 'Validation failed',
      errors: [
        'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
        'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë',
      ],
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiConflictResponse({
    description: 'Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i',
    example: {
      success: false,
      message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBody({
    type: CreateCustomerDto,
    description: 'Th√¥ng tin ƒëƒÉng k√Ω kh√°ch h√†ng',
    examples: {
      customer1: {
        summary: 'Kh√°ch h√†ng c√≥ ƒë·ªãa ch·ªâ',
        value: {
          fullName: 'Nguy·ªÖn VƒÉn An',
          phone: '0987654321',
          email: 'nguyenvana@email.com',
          password: 'password123',
          address: '123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 2, Qu·∫≠n 5, TP.HCM',
        },
      },
      customer2: {
        summary: 'Kh√°ch h√†ng kh√¥ng c√≥ ƒë·ªãa ch·ªâ',
        value: {
          fullName: 'Tr·∫ßn Th·ªã B√≠ch',
          phone: '0976543210',
          email: 'tranthibich@email.com',
          password: 'mypassword456',
        },
      },
    },
  })
  async register(@Body() createCustomerDto: CreateCustomerDto) {
    const customer = await this.customersService.register(createCustomerDto);
    return {
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      data: customer,
      timestamp: new Date().toISOString(),
    };
  }

  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'ƒêƒÉng nh·∫≠p kh√°ch h√†ng',
    description: 'X√°c th·ª±c th√¥ng tin ƒëƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ JWT tokens',
  })
  @ApiOkResponse({
    description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
    type: LoginResponseDto,
    example: {
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        customer: {
          _id: '60d5f484e1a2f5001f647abc',
          fullName: 'Nguy·ªÖn VƒÉn An',
          phone: '0987654321',
          email: 'nguyenvana@email.com',
          address: '123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 2, Qu·∫≠n 5, TP.HCM',
          createdAt: '2024-01-01T00:00:00.000Z',
          updatedAt: '2024-01-01T00:00:00.000Z',
        },
        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        expiresIn: 86400,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiUnauthorizedResponse({
    description: 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng',
    example: {
      success: false,
      message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBody({
    type: LoginCustomerDto,
    description: 'Th√¥ng tin ƒëƒÉng nh·∫≠p',
    examples: {
      login: {
        summary: 'ƒêƒÉng nh·∫≠p v·ªõi email v√† password',
        value: {
          email: 'nguyenvana@email.com',
          password: 'password123',
        },
      },
    },
  })
  async login(@Body() loginCustomerDto: LoginCustomerDto) {
    const result = await this.customersService.login(loginCustomerDto);
    return {
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: result,
      timestamp: new Date().toISOString(),
    };
  }

  @Get()
  @ApiOperation({
    summary: 'L·∫•y danh s√°ch kh√°ch h√†ng (Admin)',
    description: 'L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng v·ªõi ph√¢n trang',
  })
  @ApiQuery({
    name: 'page',
    required: false,
    type: Number,
    description: 'S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)',
    example: 1,
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    type: Number,
    description: 'S·ªë b·∫£n ghi tr√™n m·ªói trang',
    example: 10,
  })
  @ApiOkResponse({
    description: 'L·∫•y danh s√°ch th√†nh c√¥ng',
    example: {
      success: true,
      message: 'L·∫•y danh s√°ch kh√°ch h√†ng th√†nh c√¥ng',
      data: {
        items: [
          {
            _id: '60d5f484e1a2f5001f647abc',
            fullName: 'Nguy·ªÖn VƒÉn An',
            phone: '0987654321',
            email: 'nguyenvana@email.com',
            address: '123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 2, Qu·∫≠n 5, TP.HCM',
            createdAt: '2024-01-01T00:00:00.000Z',
            updatedAt: '2024-01-01T00:00:00.000Z',
          },
        ],
        total: 100,
        page: 1,
        limit: 10,
        totalPages: 10,
        hasNextPage: true,
        hasPrevPage: false,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async findAll(
    @Query('page') page: string = '1',
    @Query('limit') limit: string = '10',
  ) {
    const customers = await this.customersService.findAll(
      parseInt(page),
      parseInt(limit),
    );
    return {
      success: true,
      message: 'L·∫•y danh s√°ch kh√°ch h√†ng th√†nh c√¥ng',
      data: customers,
      timestamp: new Date().toISOString(),
    };
  }

  @Get(':id')
  @ApiOperation({
    summary: 'L·∫•y th√¥ng tin kh√°ch h√†ng theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√°ch h√†ng c·ª• th·ªÉ',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa kh√°ch h√†ng (MongoDB ObjectId)',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'L·∫•y th√¥ng tin th√†nh c√¥ng',
    type: CustomerResponseDto,
    example: {
      success: true,
      message: 'L·∫•y th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        fullName: 'Nguy·ªÖn VƒÉn An',
        phone: '0987654321',
        email: 'nguyenvana@email.com',
        address: '123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 2, Qu·∫≠n 5, TP.HCM',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
    example: {
      success: false,
      message: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async findOne(@Param('id') id: string) {
    const customer = await this.customersService.findOne(id);
    return {
      success: true,
      message: 'L·∫•y th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng',
      data: customer,
      timestamp: new Date().toISOString(),
    };
  }

  @Patch(':id')
  @ApiOperation({
    summary: 'C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng',
    description:
      'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa kh√°ch h√†ng (kh√¥ng bao g·ªìm email v√† password)',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa kh√°ch h√†ng',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiBody({
    type: UpdateCustomerDto,
    description: 'Th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t',
    examples: {
      updateProfile: {
        summary: 'C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n',
        value: {
          fullName: 'Nguy·ªÖn VƒÉn An (ƒê√£ c·∫≠p nh·∫≠t)',
          phone: '0987654322',
          address: '456 L√™ VƒÉn S·ªπ, Ph∆∞·ªùng 12, Qu·∫≠n 3, TP.HCM',
        },
      },
      updatePhone: {
        summary: 'Ch·ªâ c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i',
        value: {
          phone: '0987654323',
        },
      },
    },
  })
  @ApiOkResponse({
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: CustomerResponseDto,
    example: {
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      data: {
        _id: '60d5f484e1a2f5001f647abc',
        fullName: 'Nguy·ªÖn VƒÉn An (ƒê√£ c·∫≠p nh·∫≠t)',
        phone: '0987654322',
        email: 'nguyenvana@email.com',
        address: '456 L√™ VƒÉn S·ªπ, Ph∆∞·ªùng 12, Qu·∫≠n 3, TP.HCM',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T01:00:00.000Z',
      },
      timestamp: '2024-01-01T01:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
  })
  @ApiConflictResponse({
    description: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
  })
  async update(
    @Param('id') id: string,
    @Body() updateCustomerDto: UpdateCustomerDto,
  ) {
    const customer = await this.customersService.update(id, updateCustomerDto);
    return {
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      data: customer,
      timestamp: new Date().toISOString(),
    };
  }

  @Patch(':id/change-password')
  @ApiOperation({
    summary: 'ƒê·ªïi m·∫≠t kh·∫©u kh√°ch h√†ng',
    description:
      'Thay ƒë·ªïi m·∫≠t kh·∫©u cho kh√°ch h√†ng v·ªõi x√°c th·ª±c m·∫≠t kh·∫©u hi·ªán t·∫°i',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa kh√°ch h√†ng',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiBody({
    type: ChangePasswordDto,
    description: 'Th√¥ng tin ƒë·ªïi m·∫≠t kh·∫©u',
    examples: {
      changePassword: {
        summary: 'ƒê·ªïi m·∫≠t kh·∫©u',
        value: {
          currentPassword: 'oldpassword123',
          newPassword: 'newpassword456',
          confirmPassword: 'newpassword456',
        },
      },
    },
  })
  @ApiOkResponse({
    description: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
    example: {
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng ho·∫∑c m·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp',
    example: {
      success: false,
      message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
  })
  async changePassword(
    @Param('id') id: string,
    @Body() changePasswordDto: ChangePasswordDto,
  ) {
    const result = await this.customersService.changePassword(
      id,
      changePasswordDto,
    );
    return {
      success: true,
      message: result.message,
      timestamp: new Date().toISOString(),
    };
  }

  @Delete(':id')
  @ApiOperation({
    summary: 'X√≥a kh√°ch h√†ng (Admin)',
    description: 'X√≥a kh√°ch h√†ng kh·ªèi h·ªá th·ªëng (ch·ªâ d√†nh cho Admin)',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'ID c·ªßa kh√°ch h√†ng c·∫ßn x√≥a',
    example: '60d5f484e1a2f5001f647abc',
  })
  @ApiOkResponse({
    description: 'X√≥a kh√°ch h√†ng th√†nh c√¥ng',
    example: {
      success: true,
      message: 'X√≥a kh√°ch h√†ng th√†nh c√¥ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiNotFoundResponse({
    description: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
    example: {
      success: false,
      message: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async remove(@Param('id') id: string) {
    const result = await this.customersService.remove(id);
    return {
      success: true,
      message: result.message,
      timestamp: new Date().toISOString(),
    };
  }

  @Patch(':id/lock')
  @ApiOperation({ summary: 'Kh√≥a t√†i kho·∫£n kh√°ch h√†ng' })
  @ApiParam({ name: 'id', type: String, description: 'ID kh√°ch h√†ng' })
  async lockCustomer(@Param('id') id: string) {
    const customer = await this.customersService.update(id, { isLocked: true } as any);
    return {
      success: true,
      message: 'ƒê√£ kh√≥a t√†i kho·∫£n kh√°ch h√†ng',
      data: customer,
      timestamp: new Date().toISOString(),
    };
  }

  @Patch(':id/unlock')
  @ApiOperation({ summary: 'M·ªü kh√≥a t√†i kho·∫£n kh√°ch h√†ng' })
  @ApiParam({ name: 'id', type: String, description: 'ID kh√°ch h√†ng' })
  async unlockCustomer(@Param('id') id: string) {
    const customer = await this.customersService.update(id, { isLocked: false } as any);
    return {
      success: true,
      message: 'ƒê√£ m·ªü kh√≥a t√†i kho·∫£n kh√°ch h√†ng',
      data: customer,
      timestamp: new Date().toISOString(),
    };
  }

  @Post('refresh-token')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'L√†m m·ªõi access token',
    description: 'S·ª≠ d·ª•ng refresh token ƒë·ªÉ t·∫°o access token m·ªõi',
  })
  @ApiBody({
    description: 'Refresh token',
    schema: {
      type: 'object',
      properties: {
        refreshToken: {
          type: 'string',
          description: 'JWT Refresh Token',
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        },
      },
      required: ['refreshToken'],
    },
  })
  @ApiOkResponse({
    description: 'L√†m m·ªõi token th√†nh c√¥ng',
    example: {
      success: true,
      message: 'L√†m m·ªõi token th√†nh c√¥ng',
      data: {
        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        expiresIn: 86400,
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiUnauthorizedResponse({
    description: 'Refresh token kh√¥ng h·ª£p l·ªá',
    example: {
      success: false,
      message: 'Token kh√¥ng h·ª£p l·ªá',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async refreshToken(@Body('refreshToken') refreshToken: string) {
    const result = await this.customersService.refreshToken(refreshToken);
    return {
      success: true,
      message: 'L√†m m·ªõi token th√†nh c√¥ng',
      data: result,
      timestamp: new Date().toISOString(),
    };
  }

  @Post('forgot-password')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Qu√™n m·∫≠t kh·∫©u - G·ª≠i email ƒë·∫∑t l·∫°i',
    description: 'G·ª≠i email ch·ª©a link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email kh√°ch h√†ng',
  })
  @ApiBody({
    type: ForgotPasswordDto,
    description: 'Email ƒë·ªÉ g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
    examples: {
      forgotPassword: {
        summary: 'Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
        value: {
          email: 'customer@example.com',
        },
      },
    },
  })
  @ApiOkResponse({
    description: 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
    example: {
      success: true,
      message: 'Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'Email kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói g·ª≠i email',
    example: {
      success: false,
      message: 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async forgotPassword(@Body() forgotPasswordDto: ForgotPasswordDto) {
    const result =
      await this.customersService.forgotPassword(forgotPasswordDto);
    return {
      success: true,
      message: result.message,
      timestamp: new Date().toISOString(),
    };
  }

  @Post('reset-password')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
    description: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi b·∫±ng token t·ª´ email',
  })
  @ApiBody({
    type: ResetPasswordDto,
    description: 'Th√¥ng tin ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
    examples: {
      resetPassword: {
        summary: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
        value: {
          token: 'abc123def456ghi789...',
          newPassword: 'NewPassword123!',
          confirmPassword: 'NewPassword123!',
        },
      },
    },
  })
  @ApiOkResponse({
    description: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng',
    example: {
      success: true,
      message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  @ApiBadRequestResponse({
    description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c m·∫≠t kh·∫©u kh√¥ng kh·ªõp',
    example: {
      success: false,
      message:
        'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi',
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async resetPassword(@Body() resetPasswordDto: ResetPasswordDto) {
    const result = await this.customersService.resetPassword(resetPasswordDto);
    return {
      success: true,
      message: result.message,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('validate-reset-token/:token')
  @ApiOperation({
    summary: 'Ki·ªÉm tra token reset password',
    description:
      'Ki·ªÉm tra xem token reset password c√≥ h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n kh√¥ng',
  })
  @ApiParam({
    name: 'token',
    type: String,
    description: 'Token reset password c·∫ßn ki·ªÉm tra',
    example: 'abc123def456ghi789...',
  })
  @ApiOkResponse({
    description: 'Th√¥ng tin tr·∫°ng th√°i token',
    example: {
      success: true,
      data: {
        valid: true,
        message: 'Token h·ª£p l·ªá',
      },
      timestamp: '2024-01-01T00:00:00.000Z',
    },
  })
  async validateResetToken(@Param('token') token: string) {
    const result = await this.customersService.validateResetToken(token);
    return {
      success: true,
      data: result,
      timestamp: new Date().toISOString(),
    };
  }
}
